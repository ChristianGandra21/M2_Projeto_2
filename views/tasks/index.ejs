<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title || 'Gerenciador de Tarefas' %></title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <div class="container">
      <header>
        <h1>üè† Gerenciador de Tarefas - P√°gina Principal!!</h1>
        <nav>
          <a href="/tasks/new" class="btn btn-primary">‚ûï Nova Tarefa</a>
          <a href="/users" class="btn btn-success">üë§ Usu√°rios Cadastrados</a>
        </nav>
      </header>

      <main>
        <!-- Mensagens de Sucesso/Erro -->
        <div id="messages-container">
          <!-- As mensagens ser√£o inseridas aqui via JavaScript -->
        </div>

        <!-- Se√ß√£o de Tarefas -->
        <div class="card">
          <div class="section-header">
            <h2>üìã Lista de Tarefas</h2>
            <a href="/tasks/new" class="btn btn-primary">‚ûï Criar Tarefa</a>
          </div>

          <% if (tasks.length === 0) { %>
          <div class="alert alert-info">
            <p>
              Nenhuma tarefa cadastrada.
              <a href="/tasks/new">Criar primeira tarefa</a>
            </p>
          </div>
          <% } else { %>
          <div class="task-grid">
            <% tasks.forEach(task => { %>
            <div class="task-card <%= task.completed ? 'completed' : '' %>">
              <div class="task-header">
                <h3 class="task-title"><%= task.title %></h3>
                <span
                  class="task-status <%= task.completed ? 'status-completed' : 'status-pending' %>"
                >
                  <%= task.completed ? '‚úÖ Conclu√≠da' : '‚è≥ Pendente' %>
                </span>
              </div>

              <div class="task-body">
                <p class="task-description">
                  <%= task.description || 'Sem descri√ß√£o' %>
                </p>
                <div class="task-meta">
                  <% if (task.user) { %>
                  <span class="task-user">üë§ <%= task.user %></span>
                  <% } %> <% if (task.due_date) { %>
                  <span class="task-date">
                    üìÖ <%= new Date(task.due_date).toLocaleDateString('pt-BR')
                    %>
                  </span>
                  <% } %>
                </div>
              </div>

              <div class="task-actions">
                <a
                  href="/tasks/edit/<%= task.id %>"
                  class="btn btn-sm btn-secondary"
                  >‚úèÔ∏è Editar</a
                >

                <button
                  type="button"
                  class="btn btn-sm <%= task.completed ? 'btn-warning' : 'btn-success' %>"
                  data-action="toggle-task"
                  data-id="<%= task.id %>"
                >
                  <%= task.completed ? '‚Ü©Ô∏è Reabrir' : '‚úÖ Concluir' %>
                </button>

                <button
                  type="button"
                  class="btn btn-sm btn-danger"
                  data-action="delete-task"
                  data-id="<%= task.id %>"
                >
                  üóëÔ∏è Excluir
                </button>
              </div>
            </div>
            <% }) %>
          </div>
          <% } %>
        </div>

        <!-- Estat√≠sticas -->
        <div class="card">
          <h3>üìä Estat√≠sticas</h3>
          <div class="stats-grid">
            <div class="stat-item">
              <span class="stat-number"><%= tasks.length %></span>
              <span class="stat-label">Total de Tarefas</span>
            </div>
            <div class="stat-item">
              <span class="stat-number"
                ><%= tasks.filter(t => t.completed).length %></span
              >
              <span class="stat-label">Conclu√≠das</span>
            </div>
            <div class="stat-item">
              <span class="stat-number"
                ><%= tasks.filter(t => !t.completed).length %></span
              >
              <span class="stat-label">Pendentes</span>
            </div>
            <div class="stat-item">
              <span class="stat-number"><%= users.length %></span>
              <span class="stat-label">Usu√°rios</span>
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Mostrar mensagens de sucesso/erro baseadas nos par√¢metros da URL
        const urlParams = new URLSearchParams(window.location.search);
        const success = urlParams.get("success");
        const title = urlParams.get("title");
        const name = urlParams.get("name");
        const messagesContainer = document.getElementById("messages-container");

        if (success && messagesContainer) {
          let message = "";
          let alertClass = "alert-success";

          switch (success) {
            case "task_updated":
              message = `‚úÖ Tarefa "${
                title || "sem t√≠tulo"
              }" foi atualizada com sucesso!`;
              break;
            case "task_deleted":
              message = `‚úÖ Tarefa "${
                title || "sem t√≠tulo"
              }" foi exclu√≠da com sucesso!`;
              break;
            case "user_updated":
              message = `‚úÖ Usu√°rio "${
                name || "sem nome"
              }" foi atualizado com sucesso!`;
              break;
            case "user_deleted":
              message = `‚úÖ Usu√°rio "${
                name || "sem nome"
              }" foi exclu√≠do com sucesso!`;
              break;
            case "task_created":
              message = `‚úÖ Tarefa "${
                title || "sem t√≠tulo"
              }" foi criada com sucesso!`;
              break;
            case "user_created":
              message = `‚úÖ Usu√°rio "${
                name || "sem nome"
              }" foi criado com sucesso!`;
              break;
            default:
              message = "‚úÖ Opera√ß√£o realizada com sucesso!";
          }

          if (message) {
            const alertDiv = document.createElement("div");
            alertDiv.className = `alert ${alertClass}`;
            alertDiv.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <span>${message}</span>
                        <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 18px; cursor: pointer; color: #155724;">√ó</button>
                    </div>
                `;
            messagesContainer.appendChild(alertDiv);

            // Auto-remover ap√≥s 5 segundos
            setTimeout(() => {
              if (alertDiv.parentNode) {
                alertDiv.remove();
              }
            }, 5000);

            // Limpar URL sem recarregar a p√°gina
            const newUrl = window.location.pathname;
            window.history.replaceState({}, document.title, newUrl);
          }
        }

        // Melhorar confirma√ß√µes de exclus√£o
        document.body.addEventListener("click", async (e) => {
          // Verificar se √© um formul√°rio de exclus√£o
          if (e.target.closest('form[action*="/delete/"]')) {
            e.preventDefault();
            const form = e.target.closest("form");
            const isTask = form.action.includes("/tasks/delete/");
            const isUser = form.action.includes("/users/delete/");

            let itemName = "este item";

            if (isTask) {
              const taskCard = form.closest(".task-card");
              if (taskCard) {
                const titleElement = taskCard.querySelector(".task-title");
                itemName = titleElement
                  ? `a tarefa "${titleElement.textContent}"`
                  : "esta tarefa";
              }
            } else if (isUser) {
              const userCard = form.closest(".user-card");
              if (userCard) {
                const nameElement = userCard.querySelector(".user-name");
                itemName = nameElement
                  ? `o usu√°rio "${nameElement.textContent}"`
                  : "este usu√°rio";
              }
            }

            const confirmed = confirm(
              `‚ö†Ô∏è Tem certeza que deseja excluir ${itemName}?\n\n` +
                `Esta a√ß√£o n√£o pode ser desfeita.`
            );

            if (confirmed) {
              // Mostrar loading
              const button = form.querySelector('button[type="submit"]');
              if (button) {
                button.disabled = true;
                button.innerHTML = "‚è≥ Excluindo...";
              }
              form.submit();
            }
            return;
          }

          // C√≥digo original para bot√µes com data-action
          const btn = e.target.closest("button[data-action]");
          if (!btn) return;

          const action = btn.dataset.action;
          const id = btn.dataset.id;

          if (action === "toggle-task") {
            const res = await fetch(`/tasks/toggle/${id}`, { method: "POST" });
            if (res.redirected) window.location.href = res.url;
            else alert("Erro ao alternar status da tarefa.");
          }

          if (action === "delete-task") {
            if (!confirm("Tem certeza que deseja excluir esta tarefa?")) return;
            const res = await fetch(`/tasks/delete/${id}`, { method: "POST" });
            if (res.redirected) window.location.href = res.url;
            else alert("Erro ao excluir tarefa.");
          }

          if (action === "delete-user") {
            if (!confirm("Tem certeza que deseja excluir este usu√°rio?"))
              return;
            const res = await fetch(`/users/delete/${id}`, { method: "POST" });
            if (res.redirected) window.location.href = res.url;
            else alert("Erro ao excluir usu√°rio.");
          }
        });
      });
    </script>
  </body>
</html>
