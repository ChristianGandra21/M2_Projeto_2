/**
 * SERVIDOR PRINCIPAL - SISTEMA GERENCIADOR DE TAREFAS MVC
 *
 * Este arquivo configura e inicializa o servidor Express.js que serve
 * a aplicaÃ§Ã£o web de gerenciamento de tarefas seguindo o padrÃ£o MVC.
 *
 * Funcionalidades:
 * - ConfiguraÃ§Ã£o do servidor Express
 * - DefiniÃ§Ã£o de middlewares
 * - ConfiguraÃ§Ã£o do template engine EJS
 * - Roteamento para views e APIs
 */

// ImportaÃ§Ã£o das dependÃªncias principais
const express = require("express"); // Framework web para Node.js
const path = require("path"); // UtilitÃ¡rio para trabalhar com caminhos de arquivos
const bodyParser = require("body-parser"); // Middleware para parsing de dados HTTP

// CriaÃ§Ã£o da instÃ¢ncia da aplicaÃ§Ã£o Express
const app = express();

// ImportaÃ§Ã£o dos mÃ³dulos de rotas (seguindo padrÃ£o MVC)
const indexRoutes = require("./routes/index"); // Rota principal (redirecionamento)
const taskRoutes = require("./routes/tasks"); // Rotas para operaÃ§Ãµes com tarefas
const userRoutes = require("./routes/users"); // Rotas para operaÃ§Ãµes com usuÃ¡rios

// ========== CONFIGURAÃ‡Ã•ES DO SERVIDOR ==========

// ConfiguraÃ§Ã£o do template engine EJS para renderizaÃ§Ã£o dinÃ¢mica de pÃ¡ginas
app.set("view engine", "ejs"); // Define EJS como engine de templates
app.set("views", path.join(__dirname, "views")); // Define diretÃ³rio das views

// ConfiguraÃ§Ã£o de middlewares para processamento de requisiÃ§Ãµes
app.use(express.static(path.join(__dirname, "public"))); // Serve arquivos estÃ¡ticos (CSS, JS, imagens)
app.use(bodyParser.json()); // Parser para dados JSON nas requisiÃ§Ãµes
app.use(bodyParser.urlencoded({ extended: true })); // Parser para dados de formulÃ¡rios HTML

// ========== CONFIGURAÃ‡ÃƒO DE ROTAS ==========

// Rotas para Views EJS (renderizaÃ§Ã£o de pÃ¡ginas HTML)
// Estas rotas retornam pÃ¡ginas completas renderizadas com EJS
app.use("/", indexRoutes); // Rota raiz - redireciona para pÃ¡gina principal
app.use("/tasks", taskRoutes); // Rotas de tarefas - /tasks, /tasks/new, /tasks/edit/:id
app.use("/users", userRoutes); // Rotas de usuÃ¡rios - /users, /users/new, /users/edit/:id

// Rotas para API (comunicaÃ§Ã£o via fetch() - retornam JSON)
// Estas rotas sÃ£o usadas para operaÃ§Ãµes assÃ­ncronas via JavaScript
app.use("/api/tasks", taskRoutes); // API de tarefas - endpoints JSON para CRUD
app.use("/api/users", userRoutes); // API de usuÃ¡rios - endpoints JSON para CRUD

// ========== INICIALIZAÃ‡ÃƒO DO SERVIDOR ==========

// DefiniÃ§Ã£o da porta do servidor (usa variÃ¡vel de ambiente ou 3000 como padrÃ£o)
const PORT = process.env.PORT || 3000;

// InicializaÃ§Ã£o do servidor HTTP
app.listen(PORT, () => {
  console.log(`ðŸš€ Servidor rodando em http://localhost:${PORT}`);
  console.log(`ðŸ“‹ Sistema Gerenciador de Tarefas MVC iniciado com sucesso!`);
});
